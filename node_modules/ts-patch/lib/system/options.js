"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetOptions = exports.parseOptions = exports.appOptions = exports.defaultOptions = void 0;
var logger_1 = require("./logger");
var errors_1 = require("./errors");
var helpers_1 = require("./helpers");
var file_utils_1 = require("../file-utils");
exports.defaultOptions = {
    logLevel: logger_1.Log.normal,
    color: true,
    silent: false,
    verbose: false,
    dir: process.cwd(),
    instanceIsCLI: false
};
/** App-wide options storage */
exports.appOptions = __assign({}, exports.defaultOptions);
/* ********************************************************************************************************************
 * Parser
 * ********************************************************************************************************************/
/**
 * Create full options object using user input and assigns it to appOptions
 */
var parseOptions = function (options) {
    if (!options || (options === exports.appOptions))
        return exports.appOptions;
    var has = function (key) { return options.hasOwnProperty(key); };
    if (has('color'))
        exports.appOptions.color = options['color'];
    if (has('basedir')) {
        console.warn("--basedir is deprecated and will be removed in the future. Use --dir instead.");
        options.dir = options.dir || options.basedir;
    }
    if (has('persist'))
        console.warn("--persist has been removed. Please use prepare script instead!");
    if (has('global') && has('dir'))
        throw new errors_1.OptionsError("Cannot specify both --global and --dir");
    if (has('global'))
        options.dir = (0, file_utils_1.getGlobalTSDir)();
    Object.assign(exports.appOptions, helpers_1.pick.apply(void 0, __spreadArray([options], (0, helpers_1.getKeys)(exports.defaultOptions), false)));
    exports.appOptions.logLevel =
        (exports.appOptions.silent) ? logger_1.Log.system :
            (exports.appOptions.verbose) ? logger_1.Log.verbose :
                (exports.appOptions.instanceIsCLI) ? logger_1.Log.normal :
                    exports.defaultOptions.logLevel;
    return exports.appOptions;
};
exports.parseOptions = parseOptions;
var resetOptions = function (options) { return (0, exports.parseOptions)(__assign(__assign({}, exports.defaultOptions), options)); };
exports.resetOptions = resetOptions;
//# sourceMappingURL=options.js.map